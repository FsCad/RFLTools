(defun RFL:INTERS2 (NODE1 NODE2 / ANG1 ANG2 A B C CHECKARC CHECKLINE M P1 P2 P11 P12 BULGE1 P21 P22 BULGE2 P1C P2C PM P1M P2M R1 R2 TMP X Y)
 (defun CHECKLINE (P P1 P2)
  (if (or (> (distance P P1) (distance P1 P2)) (> (distance P P2) (distance P1 P2)))
   (eval nil)
   (setq P P)
  )
 )
 (defun CHECKARC (P PC A1 A2 BULGE / A)
  (setq A (angle PC P))
  (if (> BULGE 0.0)
   (progn
    (if (> A1 A2)
     (progn
      (setq A1 (- A1 pi pi))
      (if (> A pi) (setq A (- A pi pi)))
     )
    )
    (if (and (> A A1) (< A A2))
     (setq P P)
     (eval nil)
    )
   )
   (progn
    (if (> A2 A1)
     (progn
      (setq A2 (- A2 pi pi))
      (if (> A pi) (setq A (- A pi pi)))
     )
    )
    (if (and (> A A2) (< A A1))
     (setq P P)
     (eval nil)
    )
   )
  )
 )
 (if (or (listp (last NODE1)) (listp (last NODE2)))
  (progn
   (princ "*** WILL NOT EVALUATE FOR SPIRAL! ***")
   (eval nil)
  )
  (progn
    (setq P11 (nth 1 NODE1))
    (setq P12 (nth 2 NODE1))
    (setq BULGE1 (nth 3 NODE1))
    (setq P21 (nth 1 NODE2))
    (setq P22 (nth 2 NODE2))
    (setq BULGE2 (nth 3 NODE2))
   (if (and (< (abs BULGE1) RFL:TOL) (< (abs BULGE2) RFL:TOL))
    (progn
;  LINE-LINE
     (inters P11 P12 P21 P22 T)
    )
    (progn
     (if (and (> (abs BULGE1) RFL:TOL) (> (abs BULGE2) RFL:TOL))
      (progn
;  ARC-ARC
       (princ "*** WILL NOT EVALUATE FOR ARC-ARC! ***")
       (eval nil)
      )
      (progn
;  LINE-ARC
       (if (> (abs BULGE1) RFL:TOL)
        (progn
         (setq TMP P11 P11 P21 P21 TMP)
         (setq TMP P12 P12 P22 P22 TMP)
         (setq TMP BULGE1 BULGE1 BULGE2 BULGE2 TMP)
        )
       )
       (setq P2C (RFL:CENTER P21 P22 BULGE2))
       (setq R2 (RFL:RADIUS P21 P22 BULGE2))
       (setq ANG1 (angle P2C P21))
       (setq ANG2 (angle P2C P22))
       (setq A (distance P2C P11))
       (setq B (distance P2C P12))
       (setq C (distance P11 P12))
       (setq M (/ (- (* B B) (* A A) (* C C)) (* -2.0 C)))
       (setq P1M (list (+ (car P11) (* (/ M C) (- (car P12) (car P11))))
                       (+ (cadr P11) (* (/ M C) (- (cadr P12) (cadr P11))))
                 )
       )
       (if (> (distance P2C P1M) R2)
        (progn
         (eval nil)
        )
        (if (< (abs (- (distance P2C P1M) R2)) RFL:TOL)
         (progn
;          (CHECK P1M P2C ANG1 ANG2)
;  TANGENT TO ARC (work in progress)
          (princ "*** WILL NOT EVALUATE FOR Sightline tangent to arc! ***")
          (eval nil)
         )
         (progn
          (setq Y (distance P2C P1M))
          (setq X (sqrt (- (* R2 R2) (* Y Y))))
          (setq P1 (list (+ (car P11) (* (/ (- M X) C) (- (car P12) (car P11))))
                         (+ (cadr P11) (* (/ (- M X) C) (- (cadr P12) (cadr P11))))
                   )
          )
          (setq P2 (list (+ (car P11) (* (/ (+ M X) C) (- (car P12) (car P11))))
                         (+ (cadr P11) (* (/ (+ M X) C) (- (cadr P12) (cadr P11))))
                   )
          )
          (setq P1 (CHECKLINE P1 P11 P12))
          (if (/= P1 nil) (setq P1 (CHECKARC P1 P2C ANG1 ANG2 BULGE2)))
          (setq P2 (CHECKLINE P2 P11 P12))
          (if (/= P2 nil) (setq P2 (CHECKARC P2 P2C ANG1 ANG2 BULGE2)))
          (if (and (= nil P1) (= nil P2))
           (eval nil)
           (if (= P2 nil)
            (setq P1 P1)
            (if (= P1 nil)
             (setq P2 P2)
             (list P1 P2)
            )
           )
          )
         )
        )
       )
      )
     )
    )
   )
  )
 )
)