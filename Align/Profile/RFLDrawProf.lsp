;
;
;   Program written by Robert Livingston, 99/11/15
;
;   RFL:DRAWPROF draws the current profile as defined in PVILIST
;
;
(defun RFL:DRAWPROF ( PVILIST / ANG ATTREQ BULGE C C2 CLAYER ENT ENTLIST G G1 G2 K
                                L L1 L2 L3 L4 P1 P2 P3 PLINETYPE SIGN SPLINETYPE SPLINESEGS STA STA1 STA2 TMP)
 (setq ATTREQ (getvar "ATTREQ"))
 (setvar "ATTREQ" 1)
 (setq SPLINETYPE (getvar "SPLINETYPE"))
 (setvar "SPLINETYPE" 5)
 (setq SPLINESEGS (getvar "SPLINESEGS"))
 (setvar "SPLINESEGS" 65)
 (setq PLINETYPE (getvar "PLINETYPE"))
 (setvar "PLINETYPE" 0)
 (setq CLAYER (getvar "CLAYER"))

 (if (= nil PROFDEF)
  (princ "\n*** Profile not set ***")
  (progn
   (if (= (tblsearch "BLOCK" "PVI2") nil)
    (progn
     (princ "\n*** Creating LDD PVI node ***")
     (MAKEENT "PVI2")
    )
   )
     (setq C 0)
     (if (not (tblsearch "LAYER" (cdr (assoc "PTLAYER" PROFDEF))))
      (entmake (list (cons 0 "LAYER")
                     (cons 100 "AcDbSymbolTableRecord")
                     (cons 100 "AcDbLayerTableRecord")
                     (cons 2 (cdr (assoc "PTLAYER" PROFDEF)))
                     (cons 70 0)
               )
      )
     )
     (setvar "CLAYER" (cdr (assoc "PTLAYER" PROFDEF)))
     (if (= nil (tblsearch "BLOCK" "PVI2")) (MAKEENT "PVI2"))
     (while (< C (length PVILIST))
      (setvar "ATTREQ" 0)
      (command "._INSERT"
               "PVI2"
               (RFL:PROFPOINT (nth 0 (nth C PVILIST)) (nth 1 (nth C PVILIST)))
               25.4
               25.4
               0.0
      )
      (setvar "ATTREQ" 1)
      (setq ENT (entlast))
      (setq ENTLIST (entget ENT))
      (if (= (cdr (assoc 66 ENTLIST)) 1)
       (progn
        (if (or (= C 0) (= C (- (length PVILIST) 1)))
         (progn
          (setq L 0.0 K 0.0)
         )
         (progn
          (setq L (nth 3 (nth C PVILIST)))
          (setq G1 (/ (- (nth 1 (nth C PVILIST))
                         (nth 1 (nth (- C 1) PVILIST))
                      )
                      (- (nth 0 (nth C PVILIST))
                         (nth 0 (nth (- C 1) PVILIST))
                      )
                   )
          )
          (setq G2 (/ (- (nth 1 (nth (+ C 1) PVILIST))
                         (nth 1 (nth C PVILIST))
                      )
                      (- (nth 0 (nth (+ C 1) PVILIST))
                         (nth 0 (nth C PVILIST))
                      )
                   )
          )
          (if (= G1 G2)
           (setq K 0.0)
           (setq K (abs (/ L (- G2 G1) 100.0)))
          )
         )
        )
        (while (/= (cdr (assoc 0 ENTLIST)) "SEQEND")
         (if (= (cdr (assoc 2 ENTLIST)) "LENGTH")
          (progn
           (setq ENTLIST (subst (cons 1 (rtos L 2 8)) (assoc 1 ENTLIST) ENTLIST))
           (entmod ENTLIST)
           (entupd ENT)
          )
         )
         (if (= (cdr (assoc 2 ENTLIST)) "K")
          (progn
           (setq ENTLIST (subst (cons 1 (rtos K 2 8)) (assoc 1 ENTLIST) ENTLIST))
           (entmod ENTLIST)
           (entupd ENT)
          )
         )
         (setq ENT (entnext ENT))
         (setq ENTLIST (entget ENT))
        )
       )
      )
      (setq C (+ C 1))
     )
   (setq C 1)
   (setq G1 (/ (- (nth 1 (nth C PVILIST))
                  (nth 1 (nth (- C 1) PVILIST))
               )
               (- (nth 0 (nth C PVILIST))
                  (nth 0 (nth (- C 1) PVILIST))
               )
            )
   )
   (if (= (+ C 1) (length PVILIST))
    (setq G2 0)
    (setq G2 (/ (- (nth 1 (nth (+ C 1) PVILIST))
                   (nth 1 (nth C PVILIST))
                )
                (- (nth 0 (nth (+ C 1) PVILIST))
                   (nth 0 (nth C PVILIST))
                )
             )
    )
   )
   (setq G (- G2 G1))
   (setq ANG (- (atan G2) (atan G1)))
   (if (> G 0) (setq SIGN 1.0) (setq SIGN -1.0))
   (if (= (nth 2 (nth C PVILIST)) "L")
    (progn
     (setq L3 (/ (nth 3 (nth C PVILIST)) 2.0))
     (setq L4 (/ (nth 3 (nth C PVILIST)) 2.0))
    )
    (progn
     (setq TMP (* (nth 3 (nth C PVILIST))
                (RFL:TAN (/ (abs ANG) 2.0))
             )
     )
     (setq L3 (* TMP (cos (atan (abs G1)))))
     (setq L4 (* TMP (cos (atan (abs G2)))))
    )
   )
   (setq STA1 (nth 0 (nth (- C 1) PVILIST)))
   (setq STA2 (- (nth 0 (nth C PVILIST)) L3))
   (command "._LINE"
            (RFL:PROFPOINT STA1 (elevation STA1))
            (RFL:PROFPOINT STA2 (elevation STA2))
            ""
   )
   (while (< C (- (length PVILIST) 1))
    (setq C (+ C 1))
    (setq G1 G2)
    (if (= (+ C 1) (length PVILIST))
     (setq G2 0)
     (setq G2 (/ (- (nth 1 (nth (+ C 1) PVILIST))
                    (nth 1 (nth C PVILIST))
                 )
                 (- (nth 0 (nth (+ C 1) PVILIST))
                    (nth 0 (nth C PVILIST))
                 )
              )
     )
    )
    (setq G (- G2 G1))
    (setq ANG (- (atan G2) (atan G1)))
    (if (> G 0) (setq SIGN 1.0) (setq SIGN -1.0))
    (if (= (nth 2 (nth C PVILIST)) "L")
     (progn
      (setq L1 L3)
      (setq L2 L4)
      (setq L3 (/ (nth 3 (nth C PVILIST)) 2.0))
      (setq L4 (/ (nth 3 (nth C PVILIST)) 2.0))
     )
     (progn
      (setq L1 L3)
      (setq L2 L4)
      (setq TMP (* (nth 3 (nth C PVILIST))
                 (RFL:TAN (/ (abs ANG) 2.0))
              )
      )
      (setq L3 (* TMP (cos (atan (abs G1)))))
      (setq L4 (* TMP (cos (atan (abs G2)))))
     )
    )
    (if (> (+ L1 L2) 0.0)
     (progn
      (entmake)
      (setq STA1 (- (nth 0 (nth (- C 1) PVILIST)) L1))
      (setq STA2 (+ (nth 0 (nth (- C 1) PVILIST)) L2))
      (command "._PLINE")
      (setq P1 (RFL:PROFPOINT STA1 (elevation STA1)))
      (command P1)
      (setq P1 (RFL:PROFPOINT (nth 0 (nth (- C 1) PVILIST)) (nth 1 (nth (- C 1) PVILIST))))
      (command P1)
      (setq P1 (RFL:PROFPOINT STA2 (elevation STA2)))
      (command P1)
      (command "")
      (setq ENT (entlast))
      (command "._PEDIT" ENT "S" "")
     )
    )
    (setq STA1 (+ (nth 0 (nth (- C 1) PVILIST)) L2))
    (setq STA2 (- (nth 0 (nth C PVILIST)) L3))
    (command "._LINE"
             (RFL:PROFPOINT STA1 (elevation STA1))
             (RFL:PROFPOINT STA2 (elevation STA2))
             ""
    )
   )
  )
 )
 (setvar "ATTREQ" ATTREQ)
 (setvar "SPLINETYPE" SPLINETYPE)
 (setvar "SPLINESEGS" SPLINESEGS)
 (setvar "PLINETYPE" PLINETYPE)
 (setvar "CLAYER" CLAYER)
)