;
;
;     Program written by Robert Livingston - 2015-07-29
;
;     C:PL2TANGENT is a routine for fitting an alignment to a selected polyline
;
;
(defun C:PL2TANGENT (/ ENT ENTLIST MINTANCOUNT MINTANOS ORTHOMODE OSMODE PLIST PLISTALL PLISTPART PREVENT SUBLINE SUBLINEBEST)
 (setq OSMODE (getvar "OSMODE"))
 (setvar "OSMODE" 0)
 (setq ORTHOMODE (getvar "ORTHOMODE"))
 (setvar "ORTHOMODE" 0)
 (defun PLISTPART (PLIST C1 C2 / TEMPLIST)
  (setq TEMPLIST nil)
  (if (and (< C1 (length PLIST)) (< C2 (length PLIST)) (<= C1 C2))
   (while (<= C1 C2)
    (setq TEMPLIST (append TEMPLIST (list (nth C1 PLIST))))
    (setq C1 (1+ C1))
   )
  )
  TEMPLIST
 )
 (setq PLISTALL nil)
 (setq ENT (car (entsel "\nSelect polyline to fit line : ")))
 (setq ENTLIST (entget ENT))
 (if (= "LWPOLYLINE" (cdr (assoc 0 ENTLIST)))
  (while (/= nil ENTLIST)
   (if (= 10 (caar ENTLIST))
    (setq PLISTALL (append PLISTALL (list (cdar ENTLIST))))
   )
   (setq ENTLIST (cdr ENTLIST))
  )
  (if (= "POLYLINE" (cdr (assoc 0 ENTLIST)))
   (progn
    (setq ENT (entnext ENT))
    (setq ENTLIST (entget ENT))
    (while (= "VERTEX" (cdr (assoc 0 ENTLIST)))
     (setq P (cdr (assoc 10 ENTLIST)))
     (setq PLISTALL (append PLISTALL (list (list (car P) (cadr P)))))
     (setq ENT (entnext ENT))
     (setq ENTLIST (entget ENT))
    )
   )
   (princ "\n*** Not a polyline!")
  )
 )
 (if (= nil PLISTALL)
  (princ "\n!!! Problem finding vertexes !!!")
  (progn
   (setq PREVENT nil)
   (setq MINTANCOUNT (getint "\nEnter minimum number of tangent vertexes <5> : "))
   (if (= nil MINTANCOUNT) (setq MINTANCOUNT 5))
   (setq MINTANOS (getdist "\nEnter minimum tangent offset <0.5> : "))
   (if (= nil MINTANOS) (setq MINTANOS 0.5))
   (setq C1 0)
   (while (< C1 (- (length PLISTALL) MINTANCOUNT))
    (setq C2 (+ C1 MINTANCOUNT -1))
    (setq SUBLINEBEST nil)
    (setq SUBLINE (RFL:BESTLINE (PLISTPART PLISTALL C1 C2)))
    (while (and (/= nil SUBLINE) (< C2 (length PLISTALL)) (<= (last SUBLINE) MINTANOS))
     (setq SUBLINEBEST SUBLINE)
     (setq C2 (1+ C2))
     (setq SUBLINE (RFL:BESTLINE (PLISTPART PLISTALL C1 C2)))
    )
    (princ (strcat "\nC1 = " (itoa C1) ", C2 = " (itoa C2) ", OS = " (if (/= nil SUBLINE) (rtos (last SUBLINE)) "nil")))
    (if (/= nil SUBLINEBEST)
     (progn
      (entmake (list (cons 0 "LINE")
                     (list 10 (car (nth 0 SUBLINEBEST)) (cadr (nth 0 SUBLINEBEST)) 0.0)
                     (list 11 (car (nth 1 SUBLINEBEST)) (cadr (nth 1 SUBLINEBEST)) 0.0)
               )
      )
      (setq ENT (entlast))(RFL:PUTPREVENT ENT PREVENT)(RFL:PUTNEXTENT PREVENT ENT)(setq PREVENT ENT)
     )
    )
    (if (= nil SUBLINEBEST)
     (setq C1 (1+ C1))
     (setq C1 C2)
    )
   )
  )
 )
 (setvar "OSMODE" OSMODE)
 (setvar "ORTHOMODE" ORTHOMODE)
 T
)