;
;
;     Program written by Robert Livingston, 0/12/18
;
;     VC2TAN draws a line tangent to two vertical curves
;
(defun C:VC2TAN (/ A1 A2 B1 B2 C1 C2 ENT ENTLIST F G GA GB G1 G2 P P1 P2 P3 SIGN V VA VB X XA XB X1 X2 Y YA YB Y1 Y2 TMP)

 (defun SIGN (X)
  (if (< X 0.0)
   (eval -1)
   (eval 1)
  )
 )

 (defun F (X Y / SA SB SC X1A X1B Y1A Y1B)
  (setq SA A2)
  (setq SB (* -2.0 A2 X))
  (setq SC (- Y C2 (* B2 X)))
  (setq X1A (/ (+ (* -1.0 SB) (sqrt (- (* SB SB) (* 4.0 SA SC)))) (* 2.0 SA)))
  (setq Y1A (+ (* A2 X1A X1A) (* B2 X1A) C2))
  (setq X1B (/ (- (* -1.0 SB) (sqrt (- (* SB SB) (* 4.0 SA SC)))) (* 2.0 SA)))
  (setq Y1B (+ (* A2 X1B X1B) (* B2 X1B) C2))
  (if (> X1A X1B)
   (list X1A Y1A)
   (list X1B Y1B)
  )
 )

 (setq ENT (car (entsel "\nSelect 'from' vertical curve :")))
 (if (/= nil ENT)
  (progn
   (setq ENTLIST (entget ENT))
   (if (= "POLYLINE" (cdr (assoc 0 ENTLIST)))
    (progn
     (setq ENT (entnext ENT))
     (setq ENTLIST (entget ENT))
     (setq P1 (cdr (assoc 10 ENTLIST)))
     (setq ENT (entnext ENT))
     (setq ENTLIST (entget ENT))
     (setq P2 (cdr (assoc 10 ENTLIST)))
     (if (/= nil P2)
      (progn
       (setq ENT (entnext ENT))
       (setq ENTLIST (entget ENT))
       (setq P3 (cdr (assoc 10 ENTLIST)))
       (if (/= nil P3)
        (progn
         (setq ENT (entnext ENT))
         (setq ENTLIST (entget ENT))
         (while (/= "SEQEND" (cdr (assoc 0 ENTLIST)))
          (setq P2 P3)
          (setq P3 (cdr (assoc 10 ENTLIST)))
          (setq ENT (entnext ENT))
          (setq ENTLIST (entget ENT))
         )
        )
       )
      )
     )
     (if (and (/= nil P1) (/= nil P2) (/= nil P3))
      (progn
       (setq X1 (nth 0 P1))
       (setq Y1 (nth 1 P1))
       (setq X2 (nth 0 P2))
       (setq Y2 (nth 1 P2))
       (setq X3 (nth 0 P3))
       (setq Y3 (nth 1 P3))
       (setq XA (min X1 X3))
       (setq XB (max X1 X3))
       (setq G1 (/ (- Y2 Y1) (- X2 X1)))
       (setq G2 (/ (- Y3 Y2) (- X3 X2)))
       (setq A1 (/ (- G2 G1) (- X3 X1) 2.0))
       (setq B1 (/ (- G2 (* G1 (/ X3 X1))) (- 1.0 (/ X3 X1))))
       (setq C1 (- Y1 (+ (* A1 X1 X1) (* B1 X1))))
       (setq ENT (car (entsel "\nSelect 'to' vertical curve :")))
       (if (/= nil ENT)
        (progn
         (setq ENTLIST (entget ENT))
         (if (= "POLYLINE" (cdr (assoc 0 ENTLIST)))
          (progn
           (setq ENT (entnext ENT))
           (setq ENTLIST (entget ENT))
           (setq P1 (cdr (assoc 10 ENTLIST)))
           (setq ENT (entnext ENT))
           (setq ENTLIST (entget ENT))
           (setq P2 (cdr (assoc 10 ENTLIST)))
           (if (/= nil P2)
            (progn
             (setq ENT (entnext ENT))
             (setq ENTLIST (entget ENT))
             (setq P3 (cdr (assoc 10 ENTLIST)))
             (if (/= nil P3)
              (progn
               (setq ENT (entnext ENT))
               (setq ENTLIST (entget ENT))
               (while (/= "SEQEND" (cdr (assoc 0 ENTLIST)))
                (setq P2 P3)
                (setq P3 (cdr (assoc 10 ENTLIST)))
                (setq ENT (entnext ENT))
                (setq ENTLIST (entget ENT))
               )
              )
             )
            )
           )
           (if (and (/= nil P1) (/= nil P2) (/= nil P3))
            (progn
             (setq X1 (nth 0 P1))
             (setq Y1 (nth 1 P1))
             (setq X2 (nth 0 P2))
             (setq Y2 (nth 1 P2))
             (setq X3 (nth 0 P3))
             (setq Y3 (nth 1 P3))
             (setq G1 (/ (- Y2 Y1) (- X2 X1)))
             (setq G2 (/ (- Y3 Y2) (- X3 X2)))
             (setq A2 (/ (- G2 G1) (- X3 X1) 2.0))
             (setq B2 (/ (- G2 (* G1 (/ X3 X1))) (- 1.0 (/ X3 X1))))
             (setq C2 (- Y1 (+ (* A2 X1 X1) (* B2 X1))))
             (setq YA (+ (* A1 XA XA) (* B1 XA) C1))
             (setq GA (+ (* 2.0 A1 XA) B1))
             (setq VA (F XA YA))
             (setq VA (- GA (/ (- (nth 1 VA) YA) (- (nth 0 VA) XA))))
             (setq TMP (/ (- XB XA) 25.0))
             (setq X (+ XB TMP))
             (setq XB (+ XA TMP))
             (setq YB (+ (* A1 XB XB) (* B1 XB) C1))
             (setq GB (+ (* 2.0 A1 XB) B1))
             (setq VB (F XB YB))
             (setq VB (- GB (/ (- (nth 1 VB) YB) (- (nth 0 VB) XB))))
             (while (and (= (SIGN VA) (SIGN VB)) (< XB X))
              (setq XA XB)
              (setq YA YB)
              (setq GA GB)
              (setq VA VB)
              (setq XB (+ XB TMP))
              (setq YB (+ (* A1 XB XB) (* B1 XB) C1))
              (setq GB (+ (* 2.0 A1 XB) B1))
              (setq VB (F XB YB))
              (setq VB (- GB (/ (- (nth 1 VB) YB) (- (nth 0 VB) XB))))
             )
             (setq X (/ (+ XA XB) 2.0))
             (setq Y (+ (* A1 X X) (* B1 X) C1))
             (setq G (+ (* 2.0 A1 X) B1))
             (setq V (F X Y))
             (setq V (- G (/ (- (nth 1 V) Y) (- (nth 0 V) X))))
             (if (= (SIGN VA) (SIGN VB))
              (princ "\n*** No solution found ***")
              (progn
               (setq TMP 0)
               (while (and (/= XA XB) (< TMP 1000))
                (if (< (* (SIGN V) (SIGN VB)) 0.0)
                 (progn
                  (setq XA X)
                  (setq YA Y)
                  (setq VA V)
                 )
                 (progn
                  (setq XB X)
                  (setq YB Y)
                  (setq VB V)
                 )
                )
                (setq X (/ (+ XA XB) 2.0))
                (setq Y (+ (* A1 X X) (* B1 X) C1))
                (setq G (+ (* 2.0 A1 X) B1))
                (setq V (F X Y))
                (setq V (- G (/ (- (nth 1 V) Y) (- (nth 0 V) X))))
                (setq TMP (+ TMP 1))
               )
               (command "._LINE" "_NON" (list X Y) "_NON" (F X Y) "")
              )
             )
            )
           )
          )
         )
        )
       )
      )
     )
    )
   )
  )
 )
)