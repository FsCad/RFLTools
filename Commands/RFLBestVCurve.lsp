;
;
;     Program written by Robert Livingston, 2015/03/16
;
;     RFL:BESTVCURVE is a utility for finding best fit vertical curve along a selected polyline
;
;
(defun RFL:BESTVCURVE (PLIST / CALCE CALCSUME2 COUNT P1 P2 P3 TOL)
 (setq TOL 0.00001)
 (defun CALCE (P1 P2 P3 PLIST / A B C G1 G2 NODE Y YMAX)
  (setq YMAX nil)
  (setq G1 (/ (- (cadr P2) (cadr P1)) (- (car P2) (car P1))))
  (setq G2 (/ (- (cadr P3) (cadr P2)) (- (car P3) (car P2))))
  (setq A (/ (- G2 G1) (* 2.0 (- (car P3) (car P1)))))
  (setq B (- G1 (* 2.0 A (car P1))))
  (setq C (- (cadr P1) (* A (car P1) (car P1)) (* B (car P1))))
  (foreach NODE PLIST
   (setq Y (+ (* A (car NODE) (car NODE)) (* B (car NODE)) C))
   (if (= nil YMAX)
    (setq YMAX (abs (- (cadr NODE) Y)))
    (if (> (abs (- (cadr NODE) Y)) YMAX)
     (setq YMAX (abs (- (cadr NODE) Y)))
    )
   )
  )
  (eval YMAX)
 )
 (defun CALCSUME2 (P1 P2 P3 PLIST / A B C G1 G2 NODE PT STEP SUME2 SUME2T1 SUME2T2 SUME2T3 SUME2T4 SUME2T5 SUME2T6 Y)
  (setq SUME2 0.0)
  (setq G1 (/ (- (cadr P2) (cadr P1)) (- (car P2) (car P1))))
  (setq G2 (/ (- (cadr P3) (cadr P2)) (- (car P3) (car P2))))
  (setq A (/ (- G2 G1) (* 2.0 (- (car P3) (car P1)))))
  (setq B (- G1 (* 2.0 A (car P1))))
  (setq C (- (cadr P1) (* A (car P1) (car P1)) (* B (car P1))))
  (foreach NODE PLIST
   (setq Y (+ (* A (car NODE) (car NODE)) (* B (car NODE)) C))
   (setq SUME2 (+ SUME2 (expt (abs (- (cadr NODE) Y)) 2)))
  )
  (eval SUME2)
 )
 (if (< (length PLIST) 3)
  (eval nil)
  (progn
   (if (> (caar PLIST) (car (last PLIST))) (setq PLIST (reverse PLIST)))
   (setq COUNT 0)
   (setq P1 (car PLIST))
   (setq P3 (last PLIST))
   (setq P2 (list (/ (+ (car P1) (car P3)) 2.0) (/ (+ (cadr P1) (cadr P3)) 2.0)))
   (setq STEP (- (car P3) (car P1)))
   (setq SUME2 (CALCSUME2 P1 P2 P3 PLIST))
   (while (> STEP TOL)
    (setq PT (list (car P1) (+ (cadr P1) STEP)))
    (setq SUME2T1 (CALCSUME2 PT P2 P3 PLIST))
    (setq PT (list (car P1) (- (cadr P1) STEP)))
    (setq SUME2T2 (CALCSUME2 PT P2 P3 PLIST))
    (setq PT (list (car P2) (+ (cadr P2) STEP)))
    (setq SUME2T3 (CALCSUME2 P1 PT P3 PLIST))
    (setq PT (list (car P2) (- (cadr P2) STEP)))
    (setq SUME2T4 (CALCSUME2 P1 PT P3 PLIST))
    (setq PT (list (car P3) (+ (cadr P3) STEP)))
    (setq SUME2T5 (CALCSUME2 P1 P2 PT PLIST))
    (setq PT (list (car P3) (- (cadr P3) STEP)))
    (setq SUME2T6 (CALCSUME2 P1 P2 PT PLIST))
    (setq SUME2 (min SUME2 SUME2T1 SUME2T2 SUME2T3 SUME2T4 SUME2T5 SUME2T6))
    (cond ((= SUME2 SUME2T1) (setq P1 (list (car P1) (+ (cadr P1) STEP))))
          ((= SUME2 SUME2T2) (setq P1 (list (car P1) (- (cadr P1) STEP))))
          ((= SUME2 SUME2T3) (setq P2 (list (car P2) (+ (cadr P2) STEP))))
          ((= SUME2 SUME2T4) (setq P2 (list (car P2) (- (cadr P2) STEP))))
          ((= SUME2 SUME2T5) (setq P3 (list (car P3) (+ (cadr P3) STEP))))
          ((= SUME2 SUME2T6) (setq P3 (list (car P3) (- (cadr P3) STEP))))
          (T (setq STEP (/ STEP 2.0)))
    )
    (setq COUNT (+ COUNT 1))(if (= 10000 COUNT) (exit))
   )
   (list P1 P2 P3 (CALCE P1 P2 P3 PLIST))
  )
 )
)
